# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: covid-form
# app and org for use with dashboard.serverless.com
app: covid-form
org: malmas18

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.8

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
 exclude:
   - localhost/**

functions:
  accept_form_response:
    handler: handler.accept_form_response
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
     - http:
         path: form/accept-response
         method: post
     - websocket: $connect
    #  - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
  #  environment:
  #    keys: "a,b,c"


  get_csv:
    handler: handler.get_csv
  #    The following are a few example events you can configure
  #    NOTE: Please make sure to change your handler code to work with those events
  #    Check the event documentation for details
    events:
      - http:
          path: get_csv
          method: get
      # - websocket: $connect
      # - s3: ${env:BUCKET}
  #      - schedule: rate(10 minutes)
  #      - sns: greeter-topic
  #      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
  #      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
  #      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
  #      - iot:
  #          sql: "SELECT * FROM 'some_topic'"
  #      - cloudwatchEvent:
  #          event:
  #            source:
  #              - "aws.ec2"
  #            detail-type:
  #              - "EC2 Instance State-change Notification"
  #            detail:
  #              state:
  #                - pending
  #      - cloudwatchLog: '/aws/lambda/hello'
  #      - cognitoUserPool:
  #          pool: MyUserPool
  #          trigger: PreSignUp
  #      - alb:
  #          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
  #          priority: 1
  #          conditions:
  #            host: example.com
  #            path: /hello
  
  #    Define function environment variables here
    environment:
      AWS_REGION: ${env:AWS_REGION}
      AWS_ACCESS_KEY_ID: ${env:AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${env:AWS_SECRET_ACCESS_KEY}
      AWS_S3_URL: ${env:AWS_S3_URL}
      RESPONSES_BUCKET_NAME: ${env:RESPONSES_BUCKET_NAME}
      CSV_BUCKET_NAME: ${env:CSV_BUCKET_NAME}
      API_KEYS: ${env:API_KEYS}


generate_csv:
  handler: handler.generate_csv
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
  events:
    # - http:
    #     path: get_data
    #     method: post
    # - websocket: $connect
    # - s3: ${env:BUCKET}
    - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
  # environment:
  #   keys: ${env:API_KEYS}

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-python-requirements
  - serverless-offline
